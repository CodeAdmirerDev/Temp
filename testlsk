Certainly! Below is a guide to create a User ID and password validator API using ASP.NET Web API with ADO.NET instead of Entity Framework. We'll go through creating an API that can validate user credentials against a SQL Server database using ADO.NET.


using Microsoft.AspNetCore.Builder;  
using Microsoft.Extensions.DependencyInjection;  
using Microsoft.Extensions.Hosting;  
using UserValidationAPI.Data;  
using UserValidationAPI.Models;  

var builder = WebApplication.CreateBuilder(args);  

// Configure services  
builder.Services.AddSingleton<UserRepository>(sp =>  
{  
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");  
    return new UserRepository(connectionString);  
});  
builder.Services.AddControllers();  

var app = builder.Build();  

// Configure middleware  
if (app.Environment.IsDevelopment())  
{  
    app.UseDeveloperExceptionPage();  
}  

app.UseHttpsRedirection();  

app.UseAuthorization();  

app.MapControllers();  

app.Run();


### Step 1: Set Up the ASP.NET Web API Project

1. **Create a New Project:**
   - Open Visual Studio.
   - Select **Create a new project**.
   - Choose **ASP.NET Core Web Application** and click **Next**.
   - Name your project (e.g., `UserValidationAPI`) and click **Next**.
   - Select the template as **API** and click **Create**.

### Step 2: Configure Database Connection

1. **Configure the Database Connection String:**
   In your `appsettings.json`, add the SQL Server connection string:

   ```json
   {
       "ConnectionStrings": {
           "DefaultConnection": "Server=YOUR_SERVER_NAME;Database=YOUR_DATABASE_NAME;User Id=YOUR_USERNAME;Password=YOUR_PASSWORD;"
       },
       "Logging": {
           "LogLevel": {
               "Default": "Information",
               "Microsoft": "Warning",
               "Microsoft.Hosting.Lifetime": "Information"
           }
       },
       "AllowedHosts": "*"
   }
   ```

### Step 3: Implement the User Model

1. **Create a Model Class:**
   Create a `User` model in the `Models` folder:

   ```csharp
   namespace UserValidationAPI.Models
   {
       public class User
       {
           public string UserId { get; set; }
           public string Password { get; set; }
       }
   }
   ```

### Step 4: Implement the User Repository with ADO.NET

1. **Create a User Repository:**
   Create a `UserRepository` in the `Data` folder:

   ```csharp
   using System;
   using System.Data.SqlClient;
   using System.Threading.Tasks;
   using UserValidationAPI.Models;

   namespace UserValidationAPI.Data
   {
       public class UserRepository
       {
           private readonly string _connectionString;

           public UserRepository(string connectionString)
           {
               _connectionString = connectionString;
           }

           public async Task<bool> ValidateUser(User user)
           {
               using (SqlConnection conn = new SqlConnection(_connectionString))
               {
                   await conn.OpenAsync();

                   string query = "SELECT COUNT(*) FROM Users WHERE UserId = @UserId AND Password = @Password";
                   using (SqlCommand cmd = new SqlCommand(query, conn))
                   {
                       cmd.Parameters.AddWithValue("@UserId", user.UserId);
                       cmd.Parameters.AddWithValue("@Password", user.Password);

                       int count = (int)await cmd.ExecuteScalarAsync();
                       return count > 0;
                   }
               }
           }
       }
   }
   ```

### Step 5: Implement the API Controller

1. **Create a User Controller:**
   Create a `UserController` in the `Controllers` folder:

   ```csharp
   using Microsoft.AspNetCore.Mvc;
   using System.Threading.Tasks;
   using UserValidationAPI.Data;
   using UserValidationAPI.Models;

   [Route("api/[controller]")]
   [ApiController]
   public class UserController : ControllerBase
   {
       private readonly UserRepository _userRepository;

       public UserController(UserRepository userRepository)
       {
           _userRepository = userRepository;
       }

       [HttpPost("validate")]
       public async Task<IActionResult> ValidateUser([FromBody] User user)
       {
           if (user == null || string.IsNullOrEmpty(user.UserId) || string.IsNullOrEmpty(user.Password))
           {
               return BadRequest("User ID and Password are required.");
           }

           bool isValid = await _userRepository.ValidateUser(user);
           if (!isValid)
           {
               return Unauthorized("Invalid User ID or Password.");
           }

           return Ok("User validated successfully.");
       }
   }
   ```

### Step 6: Configure Services in Startup

1. **Configure Dependency Injection:**
   In `Startup.cs`, configure the services to include your `UserRepository`:

   ```csharp
   using Microsoft.Extensions.DependencyInjection;

   public class Startup
   {
       public void ConfigureServices(IServiceCollection services)
       {
           services.AddControllers();

           // Add the UserRepository with DI
           services.AddSingleton<UserRepository>(sp =>
           {
               string connectionString = Configuration.GetConnectionString("DefaultConnection");
               return new UserRepository(connectionString);
           });
       }

       public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
       {
           if (env.IsDevelopment())
           {
               app.UseDeveloperExceptionPage();
           }

           app.UseRouting();
           app.UseAuthorization();

           app.UseEndpoints(endpoints =>
           {
               endpoints.MapControllers();
           });
       }
   }
   ```

### Step 7: Test Your API

1. **Run the Application:**
   Start your application, and use tools like Postman to test the API.

2. **Make a POST Request:**
   Test the `/api/user/validate` endpoint with a JSON body:

   ```json
   {
       "UserId": "testUser",
       "Password": "testPassword"
   }
   ```

### Security Note:

1. **Password Security:** This example stores passwords in plaintext, which is highly insecure. Always hash passwords before storing them in the database, using libraries such as `BCrypt.Net` or similar.

2. **SQL Injection:** The example uses parameterized queries to prevent SQL injection but be mindful of any additional risks in production.

With this basic setup, you can expand your project by implementing user registration, password hashing, and other features.
