using System;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Extensions.Configuration;

public class LegacyDataImportService
{
    private readonly string _sqlConnectionString;
    private readonly string _blobConnectionString;
    private readonly string _blobContainerName;

    public LegacyDataImportService(IConfiguration configuration)
    {
        _sqlConnectionString = configuration.GetConnectionString("AzureSqlConnection");
        _blobConnectionString = configuration.GetConnectionString("AzureBlobConnection");
        _blobContainerName = configuration["BlobContainerName"];
    }

    // Method to retrieve legacy data from Blob Storage and insert into Azure SQL Database
    public async Task RetrieveAndInsertLegacyData()
    {
        try
        {
            // Step 1: Connect to Blob Storage and get the container
            BlobServiceClient blobServiceClient = new BlobServiceClient(_blobConnectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(_blobContainerName);

            // Step 2: List all blobs in the container
            await foreach (var blobItem in containerClient.GetBlobsAsync())
            {
                Console.WriteLine($"Found blob: {blobItem.Name}");

                // Step 3: Download the blob
                BlobClient blobClient = containerClient.GetBlobClient(blobItem.Name);
                var blobData = await DownloadBlobAsync(blobClient);

                if (blobData != null)
                {
                    // Step 4: Deserialize the blob data (assuming JSON format)
                    var deserializedData = JsonConvert.DeserializeObject<List<LegacyData>>(blobData);

                    // Step 5: Insert deserialized data into Azure SQL Database
                    if (deserializedData != null)
                    {
                        await InsertLegacyDataIntoSql(deserializedData);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while retrieving and inserting legacy data: {ex.Message}");
        }
    }

    // Helper method to download blob content as a string
    private async Task<string> DownloadBlobAsync(BlobClient blobClient)
    {
        try
        {
            BlobDownloadInfo download = await blobClient.DownloadAsync();

            using (var reader = new StreamReader(download.Content))
            {
                return await reader.ReadToEndAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading blob {blobClient.Name}: {ex.Message}");
            return null;
        }
    }

    // Method to insert legacy data into SQL database
    private async Task InsertLegacyDataIntoSql(List<LegacyData> legacyDataList)
    {
        using (SqlConnection conn = new SqlConnection(_sqlConnectionString))
        {
            await conn.OpenAsync();

            foreach (var data in legacyDataList)
            {
                // Prepare the SQL insert query (adjust columns as per your database table)
                var query = "INSERT INTO YourTable (Id, Data, Timestamp) VALUES (@Id, @Data, @Timestamp)";
                
                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@Id", data.Id);
                    cmd.Parameters.AddWithValue("@Data", data.Data);
                    cmd.Parameters.AddWithValue("@Timestamp", data.Timestamp);

                    // Execute the insert command
                    await cmd.ExecuteNonQueryAsync();
                }
            }
        }

        Console.WriteLine("Data successfully inserted into Azure SQL Database.");
    }
}

// Define your LegacyData model (adjust based on your actual table structure)
public class LegacyData
{
    public int Id { get; set; }
    public string Data { get; set; }
    public DateTime Timestamp { get; set; }
}
